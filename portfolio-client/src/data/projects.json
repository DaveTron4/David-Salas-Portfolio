[
  {
    "id": "1",
    "title": "Coffee Canvas",
    "shortDesc": "Full-stack coffee customization platform with real-time pricing and CRUD operations.",
    "longDesc": "A full-stack coffee customization platform built with React, Express.js, and PostgreSQL that lets users create, save, edit, and delete custom drink recipes. Features a dynamic real-time price calculator and intelligent form validation that conditionally disables incompatible options like roast type for espresso. Includes dynamic CSS theming that transforms the app's visual identity from hot to iced themes based on user selection.",
    "image": "/images/coffee.png",
    "technologies": [
      "React",
      "Express.js",
      "PostgreSQL",
      "Node.js",
      "CSS",
      "RESTful API"
    ],
    "liveUrl": "",
    "githubUrl": "https://github.com/DaveTron4/coffee-canvas",
    "challenge": "Implementing complex frontend business logic for real-time price calculations and resolving critical API bugs including 404 errors and malformed SQL statements.",
    "solution": "Debugged Express.js controllers, corrected INSERT/UPDATE SQL queries, and built reusable data helper utilities to map database IDs to human-readable names for a seamless user experience."
  },
  {
    "id": "2",
    "title": "QR Code Generator",
    "shortDesc": "Flask web app generating 1,000+ QR codes with improved efficiency.",
    "longDesc": "A Flask-based web application that generates unique QR codes for business cards and other uses. Built for a retail client, the app has generated over 1,000 QR codes using Python libraries like qrcode and Pillow. Features a lightweight, responsive frontend and per-session file management that isolates user data and automates backend cleanup, improving system efficiency by 90%.",
    "image": "/images/qr-code.png",
    "technologies": [
      "Python",
      "Flask",
      "HTML",
      "CSS",
      "qrcode",
      "Pillow",
      "Render"
    ],
    "liveUrl": "https://qr-code-yuwx.onrender.com/",
    "githubUrl": "https://github.com/DaveTron4/QR_Code",
    "challenge": "Optimizing QR code rendering time and managing user sessions to prevent data conflicts.",
    "solution": "Refactored core processes into reusable Python functions, reducing backend logic by 50% and implementing per-session file management for better data isolation and automated cleanup."
  },
  {
    "id": "3",
    "title": "The Spotter Zone",
    "shortDesc": "Responsive fitness SPA with authentication and real-time data.",
    "longDesc": "A responsive single-page application built with React that supports dynamic routing and secure user authentication. Integrated Supabase Auth to manage user accounts and PostgreSQL for real-time data storage. Styled with Bootstrap for mobile-first responsiveness and deployed on Netlify with CI/CD workflows, reducing deployment time by 30%.",
    "image": "/images/spotter-zone.png",
    "technologies": [
      "React",
      "PostgreSQL",
      "Supabase",
      "Bootstrap",
      "Netlify",
      "Git"
    ],
    "liveUrl": "https://thespotterzone.netlify.app/",
    "githubUrl": "https://github.com/DaveTron4/The-Spotter-Zone",
    "challenge": "Learning Supabase integration and ensuring secure authentication flows while maintaining responsive design.",
    "solution": "Implemented Supabase Auth for secure user management, used Bootstrap for consistent UI across devices, and configured Netlify CI/CD for streamlined deployments."
  },
  {
    "id": "4",
    "title": "Employee Management System",
    "shortDesc": "Enterprise-ready employee CRUD with Java Spring Boot API and React frontend.",
    "longDesc": "Led a 4-person team to develop an Employee Management System with a React frontend optimized with Vite and a Java Spring Boot RESTful API backed by MySQL. Designed a scalable database schema and optimized SQL queries using DBeaver. Applied clean architecture principles and rigorous Git/GitHub workflows to deliver a maintainable, testable system built for enterprise adoption.",
    "image": "/images/ems.png",
    "technologies": [
      "React",
      "Java",
      "Spring Boot",
      "MySQL",
      "Bootstrap",
      "Vite",
      "DBeaver",
      "Git"
    ],
    "liveUrl": "",
    "githubUrl": "https://github.com/DaveTron4/employee-management-system",
    "challenge": "Coordinating team development, designing a scalable database schema, and ensuring the API could handle high-volume concurrent requests.",
    "solution": "Led iterative design reviews, used DBeaver for schema validation and query optimization, and enforced clean architecture to deliver a stable, enterprise-ready system."
  },
  {
    "id": "5",
    "title": "Minecraft Server Guide",
    "shortDesc": "Complete guide to deploying a modded Minecraft Forge server on Ubuntu.",
    "longDesc": "A comprehensive step-by-step guide for setting up a headless Ubuntu Server to host a modded Minecraft Forge server. Covers Ubuntu installation, Wi-Fi configuration with Netplan, OpenJDK setup, Forge installation, mod management via SCP, and server optimization with JVM tuning. Includes solutions for NAT/port-forwarding challenges using Playit.gg and best practices for backups and resource allocation.",
    "image": "/images/minecraft.png",
    "technologies": [
      "Ubuntu Server",
      "Bash",
      "SCP",
      "Netplan",
      "Java"
    ],
    "liveUrl": "https://davetron4.github.io/Minecraft-Server-Guide/",
    "githubUrl": "https://github.com/DaveTron4/Minecraft-Server-Guide",
    "challenge": "Headless server setup, networking configuration, mod compatibility, and managing file permissions in protected directories.",
    "solution": "Documented clear, tested steps including Netplan Wi-Fi config, Forge installation, secure file transfer, JVM memory tuning, and Playit.gg tunneling for reliable server hosting."
  }
]